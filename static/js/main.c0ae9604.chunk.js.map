{"version":3,"sources":["redux/store.js","components/Square.js","components/Reset.js","components/Board.js","App.js","index.js"],"names":["initialState","squares","Array","fill","history","0","move","store","createStore","state","arguments","length","undefined","action","type","value","square","slice","position","Object","objectSpread","defineProperty","key","Square","_this","this","winClass","props","react_default","a","createElement","className","onClick","React","Component","Reset","Board","onNewGame","onBackMove","i","calculateWinner","winner","onNewMove","winLine","indexOf","components_Square","handleClick","status","_this2","moves","statusBtn","handleOnBack","renderSquare","components_Reset","handleClickNewGame","connect","dispatch","pos","lines","_lines$i","slicedToArray","b","c","App","components_Board","ReactDOM","render","es","react_router_dom","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c0ae9604.chunk.js","sourcesContent":["import { createStore} from 'redux';\r\n\r\nexport const NEW_GAME = 'NEW_GAME';\r\nexport const ONE_MOVE = 'ONE_MOVE';\r\nexport const MOVE_BACK = 'MOVE_BACK';\r\n\r\nconst initialState = {\r\n    squares: Array(9).fill(null),\r\n    history: {\r\n        0:Array(9).fill(null)\r\n    },\r\n    move: 0\r\n};\r\n\r\nconst rootReduser = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case NEW_GAME :\r\n            return  initialState;\r\n        case ONE_MOVE:\r\n            const square = state.squares.slice();\r\n            let value;\r\n            if ((state.move + 1) % 2 === 0) {\r\n                value = 'O';\r\n            } else  {\r\n                value='X';\r\n            }\r\n            square[action.position] =  value;\r\n\r\n            return {\r\n                ...state,\r\n                squares: square,\r\n                move: state.move+1,\r\n                history: {\r\n                    ...state.history,\r\n                    [state.move + 1] : square,\r\n                }\r\n            };\r\n        case MOVE_BACK:\r\n             let history = {};\r\n             for (let key in state.history) {\r\n                 history[key] = state.history[key];\r\n             }\r\n             delete (history[action.move]);\r\n            return {\r\n                ...state,\r\n                move: action.move-1,\r\n                history: history,\r\n                squares: state.history[action.move - 1],\r\n            };\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\nconst store = createStore(rootReduser);\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        const winClass = \"square \"+ this.props.winClass;\r\n        return (\r\n            <button\r\n                className={winClass}\r\n                onClick={() => this.props.onClick()}\r\n            >\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\n\r\nconst Reset = (props) => {\r\n  return (\r\n    <button\r\n      onClick={() => props.onClick()}\r\n    >\r\n      New Game\r\n    </button>\r\n  )\r\n};\r\n\r\nexport default Reset;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Square from './Square';\r\nimport  Reset from './Reset';\r\n\r\nimport {ONE_MOVE, NEW_GAME, MOVE_BACK} from '../redux/store';\r\n\r\nclass Board extends React.Component {\r\n    componentDidMount() {\r\n       this.props.onNewGame();\r\n    }\r\n\r\n    handleOnBack(move) {\r\n        this.props.onBackMove(move);\r\n    }\r\n    handleClick(i) {\r\n        const square = this.props.squares.slice();\r\n        if (calculateWinner(square).winner || square[i]) {\r\n            return;\r\n        }\r\n        this.props.onNewMove(i);\r\n    }\r\n\r\n    handleClickNewGame() {\r\n        this.props.onNewGame();\r\n    }\r\n\r\n    renderSquare(i,winLine) {\r\n        let winClass ='';\r\n        if (winLine) {\r\n            winClass = (winLine.indexOf(i) !== -1) ?\r\n                'winner_line' : '';\r\n        }\r\n        return <\r\n            Square\r\n            winClass={winClass}\r\n            value={this.props.squares[i]}\r\n            onClick = {() => this.handleClick(i)}\r\n        />;\r\n    }\r\n\r\n    render() {\r\n        const winner = calculateWinner(this.props.squares).winner;\r\n        let winLine='';\r\n        let status;\r\n        const moves = 'Move: '+this.props.move;\r\n        let value;\r\n        if ((this.props.move + 1) % 2 === 0) {\r\n            value = 'O';\r\n        } else  {\r\n            value='X';\r\n        }\r\n        let statusBtn = 'status ';\r\n        if (this.props.move === 0){\r\n            statusBtn += 'btn_hide';\r\n        }\r\n        if (winner) {\r\n            status = 'Winner: '+ winner;\r\n            winLine = calculateWinner(this.props.squares).winLine;\r\n        } else {\r\n            status = 'Next player: '+ value;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                <div className=\"status\">{moves}</div>\r\n                <div className={statusBtn}>\r\n                    <button onClick={() => this.handleOnBack(this.props.move)}>BACK</button>\r\n                </div>\r\n\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0,winLine)}\r\n                    {this.renderSquare(1,winLine)}\r\n                    {this.renderSquare(2,winLine)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3,winLine)}\r\n                    {this.renderSquare(4,winLine)}\r\n                    {this.renderSquare(5,winLine)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6,winLine)}\r\n                    {this.renderSquare(7,winLine)}\r\n                    {this.renderSquare(8,winLine)}\r\n                </div>\r\n                <div  className=\"new_game_button\">\r\n                    <Reset\r\n                        onClick = {() => this.handleClickNewGame()}\r\n                    />\r\n                </div >\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst mapState = (state) => {\r\n    return {\r\n        squares: state.squares,\r\n        move: state.move,\r\n        history: state.history,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n       onNewMove: (pos) => {\r\n           const action = {\r\n               type: ONE_MOVE,\r\n               position: pos,\r\n           };\r\n           dispatch(action);\r\n       },\r\n      onNewGame: () => {\r\n           const action = {\r\n               type: NEW_GAME\r\n           };\r\n           dispatch(action);\r\n      },\r\n      onBackMove: (move) => {\r\n           const action = {\r\n               type: MOVE_BACK,\r\n               move: move,\r\n           };\r\n           dispatch(action);\r\n      },\r\n  }\r\n};\r\n\r\n\r\nexport default connect( mapState, mapDispatchToProps)(Board);\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n        [0, 4, 8], [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n            return {\r\n                winner: squares[a],\r\n                winLine: lines[i]\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        winner: null,\r\n        winLine: null\r\n    };\r\n}","import React from 'react';\r\n\r\nimport Board from './components/Board';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './redux/store';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n\r\n"],"sourceRoot":""}